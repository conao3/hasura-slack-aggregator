#!/usr/bin/env python

from __future__ import annotations

import csv
from datetime import datetime
import json
import pathlib
from collections.abc import Iterator
from typing import Any, Callable


class _CSVEmpty(int):
    def __str__(self):
        return ""

CSVEmpty = _CSVEmpty()


def replace_none(value: tuple[Any, ...]) -> tuple[Any, ...]:
    return tuple((CSVEmpty if v is None else v) for v in value)


def parse_users(src_file: pathlib.Path) -> Iterator[tuple[Any, ...]]:
    users = json.loads(src_file.read_text())
    mapping = {
        'user_id': ['id'],
        'name': ['name'],
        'real_name': ['real_name'],
        'tz': ['tz'],
        'color': ['color'],
        'is_bot': ['is_bot'],
        'deleted': ['deleted'],
        'team_id': ['team_id'],
        'updated': ['updated'],
        'is_admin': ['is_admin'],
        'is_owner': ['is_owner'],
        'tz_label': ['tz_label'],
        'tz_offset': ['tz_offset'],
        'is_app_user': ['is_app_user'],
        'is_restricted': ['is_restricted'],
        'is_primary_owner': ['is_primary_owner'],
        'is_email_confirmed': ['is_email_confirmed'],
        'is_ultra_restricted': ['is_ultra_restricted'],
        'who_can_share_contact_card': ['who_can_share_contact_card'],
    }
    no_misc_keys = [v for val in mapping.values() for v in val]
    no_misc_keys.append('profile')  # stores in profile table

    yield tuple(mapping.keys())

    for user in users:
        yield (
            user['id'],
            user.get('name'),
            user.get('real_name'),
            user.get('tz'),
            user.get('color'),
            user.get('is_bot'),
            user.get('deleted'),
            user.get('team_id'),
            datetime.fromtimestamp(user.get('updated')) if user.get('updated') else None,
            user.get('is_admin'),
            user.get('is_owner'),
            user.get('tz_label'),
            user.get('tz_offset'),
            user.get('is_app_user'),
            user.get('is_restricted'),
            user.get('is_primary_owner'),
            user.get('is_email_confirmed'),
            user.get('is_ultra_restricted'),
            user.get('who_can_share_contact_card'),
            json.dumps({key: val for key, val in user.items() if key not in no_misc_keys}, ensure_ascii=False),
        )


def parse_profiles(src_file: pathlib.Path) -> Iterator[tuple[Any, ...]]:
    users = json.loads(src_file.read_text())
    no_misc_keys = ['image_24', 'image_32', 'image_48', 'image_72', 'image_192', 'image_512']

    yield ('user_id', 'image_24', 'image_32', 'image_48', 'image_72', 'image_192', 'image_512', 'misc')

    for user in users:
        profile = user['profile']
        yield (
            user['id'],
            profile['image_24'],
            profile['image_32'],
            profile['image_48'],
            profile['image_72'],
            profile['image_192'],
            profile['image_512'],
            json.dumps({key: val for key, val in profile.items() if key not in no_misc_keys}, ensure_ascii=False),
        )


def parse_channels(src_file: pathlib.Path) -> Iterator[tuple[Any, ...]]:
    channels = json.loads(src_file.read_text())
    mapping = {
        'channel_id': ['id'],
        'name': ['name'],
        'context_team_id': ['context_team_id'],
        'created': ['created'],
        'creator': ['creator'],
        'is_archived': ['is_archived'],
        'is_channel': ['is_channel'],
        'is_ext_shared': ['is_ext_shared'],
        'is_frozen': ['is_frozen'],
        'is_general': ['is_general'],
        'is_group': ['is_group'],
        'is_im': ['is_im'],
        'is_member': ['is_member'],
        'is_mpim': ['is_mpim'],
        'is_org_shared': ['is_org_shared'],
        'is_pending_ext_shared': ['is_pending_ext_shared'],
        'is_private': ['is_private'],
        'is_shared': ['is_shared'],
        'name_normalized': ['name_normalized'],
        'num_members': ['num_members'],
        'parent_conversation': ['parent_conversation'],
        'pending_connected_team_ids': ['pending_connected_team_ids'],
        'pending_shared': ['pending_shared'],
        'previous_names': ['previous_names'],
        'properties': ['properties'],
        'purpose': ['purpose'],
        'shared_team_ids': ['shared_team_ids'],
        'topic': ['topic'],
        'unlinked': ['unlinked'],
        'updated': ['updated'],
    }
    no_misc_keys = [v for val in mapping.values() for v in val]

    yield tuple(mapping.keys())

    for channel in channels:
        misc = {key: val for key, val in channel.items() if key not in no_misc_keys}
        yield (
            channel['id'],
            channel.get('name'),
            channel.get('context_team_id'),
            datetime.fromtimestamp(channel.get('created')) if channel.get('created') else None,
            channel.get('creator'),
            channel.get('is_archived'),
            channel.get('is_channel'),
            channel.get('is_ext_shared'),
            channel.get('is_frozen'),
            channel.get('is_general'),
            channel.get('is_group'),
            channel.get('is_im'),
            channel.get('is_member'),
            channel.get('is_mpim'),
            channel.get('is_org_shared'),
            channel.get('is_pending_ext_shared'),
            channel.get('is_private'),
            channel.get('is_shared'),
            channel.get('name_normalized'),
            channel.get('num_members'),
            json.dumps(channel.get('parent_conversation'), ensure_ascii=False) if channel.get('parent_conversation') else None,
            json.dumps(channel.get('pending_connected_team_ids'), ensure_ascii=False) if channel.get('pending_connected_team_ids') else None,
            json.dumps(channel.get('pending_shared'), ensure_ascii=False) if channel.get('pending_shared') else None,
            json.dumps(channel.get('previous_names'), ensure_ascii=False) if channel.get('previous_names') else None,
            json.dumps(channel.get('properties'), ensure_ascii=False) if channel.get('properties') else None,
            json.dumps(channel.get('purpose'), ensure_ascii=False) if channel.get('purpose') else None,
            json.dumps(channel.get('shared_team_ids'), ensure_ascii=False) if channel.get('shared_team_ids') else None,
            json.dumps(channel.get('topic'), ensure_ascii=False) if channel.get('topic') else None,
            channel.get('unlinked'),
            datetime.fromtimestamp(channel.get('updated') / 1000) if channel.get('updated') else None,
            json.dumps(misc, ensure_ascii=False) if misc else None,
        )


def parse_messages(src_file: pathlib.Path) -> Iterator[tuple[Any, ...]]:
    message: dict[str, Any] = json.loads(src_file.read_text())
    mapping = {
        'channel_id': [],
        'ts': ['ts'],
        'user_id': ['user', 'bot_id'],
        'text': ['text'],
        'attachments': ['attachments'],
        'blocks': ['blocks'],
        'edited': ['edited'],
        'file': ['file'],
        'files': ['files'],
        'hidden': ['hidden'],
        'icons': ['icons'],
        'is_locked': ['is_locked'],
        'pinned_info': ['pinned_info'],
        'reactions': ['reactions'],
        'reply_count': ['reply_count'],
        'reply_users': ['reply_users'],
        'reply_users_count': ['reply_users_count'],
        'root': ['root'],
        'saved': ['saved'],
        'subscribed': ['subscribed'],
        'subtype': ['subtype'],
        'thread_ts': ['thread_ts'],
        'upload': ['upload'],
        'upload_reply_to': ['upload_reply_to'],
    }
    no_misc_keys = [v for val in mapping.values() for v in val]
    misc = {key: val for key, val in message.items() if key not in no_misc_keys}

    yield tuple(mapping.keys())

    yield (
        src_file.parent.name,
        message['ts'],
        message.get('user') or message.get('bot_id') or 'unknown',
        message['text'].replace(r'\.', r'\\.'),
        json.dumps(message.get('attachments'), ensure_ascii=False) if message.get('attachments') else None,
        json.dumps(message.get('blocks'), ensure_ascii=False) if message.get('blocks') else None,
        json.dumps(message.get('edited'), ensure_ascii=False) if message.get('edited') else None,
        json.dumps(message.get('file'), ensure_ascii=False) if message.get('file') else None,
        json.dumps(message.get('files'), ensure_ascii=False) if message.get('files') else None,
        message.get('hidden'),
        json.dumps(message.get('icons'), ensure_ascii=False) if message.get('icons') else None,
        message.get('is_locked'),
        json.dumps(message.get('pinned_info'), ensure_ascii=False) if message.get('pinned_info') else None,
        json.dumps(message.get('reactions'), ensure_ascii=False) if message.get('reactions') else None,
        message.get('reply_count'),
        json.dumps(message.get('reply_users'), ensure_ascii=False) if message.get('reply_users') else None,
        message.get('reply_users_count'),
        json.dumps(message.get('root'), ensure_ascii=False) if message.get('root') else None,
        json.dumps(message.get('saved'), ensure_ascii=False) if message.get('saved') else None,
        message.get('subscribed'),
        message.get('subtype'),
        message.get('thread_ts'),
        message.get('upload'),
        message.get('upload_reply_to'),
        json.dumps(misc, ensure_ascii=False) if misc else None,
    )


def write_csv(parser: Callable[..., Any], src_file: pathlib.Path, dest_file: pathlib.Path) -> None:
    with dest_file.open('w') as f:
        writer = csv.writer(f, quoting=csv.QUOTE_NONNUMERIC)
        iter = parser(src_file)
        writer.writerow(next(iter))
        for row in iter:
            writer.writerow(replace_none(row))


def write_dir_csv(parser: Callable[..., Any], src_dir: pathlib.Path, dest_file: pathlib.Path) -> None:
    is_write_header = False

    with dest_file.open('w') as f:
        writer = csv.writer(f, quoting=csv.QUOTE_NONNUMERIC)
        for file in src_dir.iterdir():
            if not file.is_file():
                continue

            iter = parser(file)

            if is_write_header:
                _ = next(iter)
            else:
                writer.writerow(next(iter))
                is_write_header = True

            for row in iter:
                writer.writerow(replace_none(row))


def main():
    read_dir = pathlib.Path('slack-aggregator/log')
    write_dir = pathlib.Path('slack-aggregator-csv')
    write_dir.mkdir(parents=True, exist_ok=True)

    write_csv(parse_users, read_dir / 'users.json', write_dir / 'user.csv')
    write_csv(parse_profiles, read_dir / 'users.json', write_dir / 'profile.csv')
    write_csv(parse_channels, read_dir / 'channels.json', write_dir / 'channel.csv')

    (write_dir / 'message').mkdir(parents=True, exist_ok=True)

    for channel_dir in (read_dir / 'messages').glob('*'):
        if not channel_dir.is_dir():
            continue

        print('.', end='', flush=True)  # progress indicator
        write_dir_csv(parse_messages, channel_dir, write_dir / 'message' / f'{channel_dir.name}.csv')

    print()  # end progress indicator


if __name__ == '__main__':
    main()
